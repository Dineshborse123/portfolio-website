{"version":3,"file":"static/js/40.2280247e.chunk.js","mappings":"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","sources":["../node_modules/react-intersection-observer/src/observe.ts","../node_modules/react-intersection-observer/src/InView.tsx","sections/Projects.js","../node_modules/react-intersection-observer/src/useInView.tsx","../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","../node_modules/@babel/runtime/helpers/esm/toPrimitive.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js"],"sourcesContent":["import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import React, { useState, useEffect } from \"react\";\r\nimport { useInView } from \"react-intersection-observer\";\r\nimport \"../styles/Projects.css\";\r\n\r\nconst Projects = () => {\r\n  const { ref, inView } = useInView({\r\n    triggerOnce: true,\r\n    threshold: 0.1,\r\n  });\r\n\r\n  const projects = [\r\n    {\r\n      id: 1,\r\n      title: \"Online Loan Application & Verification System\",\r\n      description:\r\n        \"B.Sc. IT academic project using React and Node.js. Users submit loan applications with document upload and basic KYC. Admins review, approve/reject, and update status. Focus on authentication, forms, and secure data storage.\",\r\n      technologies: [\"HTML\", \"CSS\", \"JavaScript\", \"React\", \"Node.js\", \"Express\", \"MongoDB\"],\r\n      image: \"/images/project1.jpg\",\r\n      github: \"https://github.com/username/ecommerce-platform\",\r\n      live: \"https://ecommerce-demo.netlify.app\",\r\n      featured: true,\r\n      category: \"Full Stack\",\r\n    },\r\n    {\r\n      id: 2,\r\n      title: \"GYM Management System\",\r\n      description:\r\n        \"College project to manage gym memberships, attendance, trainer schedules, and class bookings. Includes simple payment tracking and a clean dashboard. Built as part of B.Sc. IT coursework.\",\r\n      technologies: [\"HTML\", \"CSS\", \"JavaScript\", \"React\", \"Firebase\"],\r\n      image: \"/images/project2.jpg\",\r\n      github: \"https://github.com/username/task-manager\",\r\n      live: \"https://taskapp-demo.netlify.app\",\r\n      featured: true,\r\n      category: \"Frontend\",\r\n    },\r\n    {\r\n      id: 3,\r\n      title: \"Online Voting System\",\r\n      description:\r\n        \"Academic project implementing secure voter registration with OTP verification and role-based access. Students cast votes once; admins see a live tally and basic audit logs. Built during B.Sc. IT.\",\r\n      technologies: [\"HTML\", \"CSS\", \"JavaScript\", \"React\", \"Node.js\", \"PostgreSQL\"],\r\n      image: \"/images/project3.jpg\",\r\n      github: \"https://github.com/username/weather-dashboard\",\r\n      live: \"https://weather-dash-demo.netlify.app\",\r\n      featured: false,\r\n      category: \"Frontend\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <section id=\"projects\" className=\"projects-section\">\r\n      <div className=\"container\">\r\n        <h2 className=\"section-title\">My Projects</h2>\r\n        <div\r\n          ref={ref}\r\n          className={`projects-grid ${inView ? \"fade-in\" : \"\"}`}\r\n        >\r\n          {projects.map((project) => (\r\n            <div key={project.id} className=\"project-card\">\r\n              <div className=\"project-image\">\r\n                <div className=\"image-placeholder\">{project.title}</div>\r\n              </div>\r\n              <div className=\"project-content\">\r\n                <h3>{project.title}</h3>\r\n                <p>{project.description}</p>\r\n                <div className=\"technologies\">\r\n                  {project.technologies.map((tech) => (\r\n                    <span key={tech} className=\"tech-tag\">\r\n                      {tech}\r\n                    </span>\r\n                  ))}\r\n                </div>\r\n                \r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Projects;\r\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>(onChange);\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element | undefined>(undefined);\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nexport { _typeof as default };","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nexport { toPropertyKey as default };","import _typeof from \"./typeof.js\";\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nexport { toPrimitive as default };","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nexport { _defineProperty as default };","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nexport { _objectSpread2 as default };"],"names":["observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","map","concat","root","has","set","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","id","observer","elements","instance","thresholds","entries","forEach","entry","_a","inView","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","Projects","ref","delay","rootMargin","triggerOnce","skip","initialInView","onChange","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result","useInView","_jsx","className","children","_jsxs","title","description","technologies","image","github","live","featured","category","project","tech","_typeof","o","Symbol","iterator","constructor","prototype","toPropertyKey","t","i","r","e","toPrimitive","call","TypeError","String","Number","_defineProperty","defineProperty","value","enumerable","configurable","writable","ownKeys","getOwnPropertySymbols","getOwnPropertyDescriptor","apply","_objectSpread2","getOwnPropertyDescriptors","defineProperties"],"sourceRoot":""}